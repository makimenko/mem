/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.makimenko.mem.server.api;

import com.makimenko.mem.server.model.Event;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@Api(value = "event", description = "the event API")
public interface EventApi {

    @ApiOperation(value = "", nickname = "eventPost", notes = "Creates a new event", response = Event.class, tags={ "question", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "event response", response = Event.class) })
    @RequestMapping(value = "/event",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Event> eventPost(@ApiParam(value = "Event to add to the database" ,required=true )  @Valid @RequestBody Event event);


    @ApiOperation(value = "", nickname = "eventUuidDelete", notes = "Deletes a new event", tags={ "question", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "event response") })
    @RequestMapping(value = "/event/{uuid}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> eventUuidDelete(@ApiParam(value = "Event UUID for deletion from the database",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "Return event detals", nickname = "eventUuidGet", notes = "Return event detals", response = Event.class, tags={ "question", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Event.class) })
    @RequestMapping(value = "/event/{uuid}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Event> eventUuidGet(@ApiParam(value = "Unique identifier of Event",required=true) @PathVariable("uuid") String uuid);

}
